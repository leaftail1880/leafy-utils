// @ts-check

import fs from "fs/promises";
import path from "path";
import { PackageJSON } from "./src/package.js";

/**
 *
 * @param {string} $path
 * @returns
 */
function toUserPath($path) {
	return path.join("../../", $path);
}

async function main() {
	console.log(" ");
	const scripts = (await fs.readdir("src")).filter((e) => e.endsWith(".js"));

	await fs.writeFile(
		"exports.js",
		`// This file is generated by ./install.js\r\r${scripts.map((e) => `export * from "./src/${e}";`).join("\r")}\r`
	);

	if (path.normalize(process.argv[1]).split(path.sep).reverse()[2] !== "node_modules") {
		console.log("Leafs-scripts was skipped.\n ");
		process.exit(0);
	}

	await addScriptsToPackage();

	console.log(" ");
	process.exit(0);
}

async function addScriptsToPackage() {
	const leafs = toUserPath("leafs");

	try {
		await fs.access(leafs);
	} catch (e) {
		if (e.code !== "ENOENT") throw e;

		// No leafs folder
		return 0;
	}

	const user_scripts = (await fs.readdir(leafs)).filter((e) => e.endsWith(".js"));

	// No leafs specified
	if (user_scripts.length < 1) return 0;

	console.log("Scripts to save:", user_scripts);

	const user_package = new PackageJSON(toUserPath("package.json"));
	await user_package.read();
	const data = user_package.data;

	data.scripts ??= {};
	for (let uscript of user_scripts) {
		const name = uscript.replace(/\.js$/, "");
		const script = `node leafs/${uscript}`;
		if (name in data.scripts && data.scripts[name] !== script) {
			// Script was already declarated
			console.error("Found script duplicate:", name);
			console.error(`Rename leafs/${uscript} to disable this warning`);
			continue;
		}
		data.scripts[name] = `node leafs/${uscript}`;
	}

	data.scripts.update_leafs = "cd node_modules/leafy-utils && node install.js";

	await user_package.write();
}

main();
