import fs from "fs/promises"
import path from "path"
import { PACKAGE } from "./src/package.js"

function toUserPath($path) {
  return path.join("../../", $path)
}

async function main() {
  /*const scripts = await fs.readdir("src")

  await fs.writeFile("index.js", `// This file is generated by install.js\n\n${scripts
    .map(e => `export * from "./src/${e}"`)
    .join("\n")
    }`)*/

  //try {
  
  
  /*} catch (e) {
    fs.writeFile("installError.log", e.message+"\n"+e.stack)
  }*/
  await addScriptsToPackage()
  /*for (const script in scripts) {
    const orig = await fs.readFile()
  }*/

  process.exit(0)
}

async function addScriptsToPackage() {
  const node_scripts = toUserPath("node_scripts")
  
  try {
    await fs.access(node_scripts)
  } catch (e) {
    return 0;
  }
  
  const user_scripts = await fs.readdir(node_scripts)
  console.log("Scripts to save:", user_scripts)
  
  
  const user_package = new PACKAGE(toUserPath("package.json"))
  await user_package.read()
  const data = user_package.data
  
  // Clear all generated scripts
  for (const script in data.scripts) {
    if (data.scripts[script].includes("node_scripts")) delete data.scripts[script]
  }
  
  for (let uscript of user_scripts) {
    const name = uscript.replace(/\.js$/, "")
    if (name in data.scripts) {
      // Script was already declarated
      console.error("Found script duplicate: ", name)
      console.error(`Rename node_scripts/${uscript} to disable this warning`)
      continue
    }
    
    data.scripts[name] = `node node_scripts/${uscript}`
  }
  
  data.scripts.update_leafs = "cd node_modules/leafy-utils && node install.js"
  
  await user_package.write()
}

main()