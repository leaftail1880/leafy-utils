import fs from "fs/promises";
import path from "path";
import { PackageJSON } from "./src/package.js";

/**
 *
 * @param {string} $path
 * @returns
 */
function toUserPath($path) {
	return path.join("../../", $path);
}

async function main() {
	console.log(" ");
	const scripts = (await fs.readdir("src")).filter((e) => e.endsWith(".js"));

	await fs.writeFile(
		"exports.js",
		`// This file is generated by install.js\r\r${scripts.map((e) => `export * from "./src/${e}"`).join("\r")}`
	);

	if (path.normalize(process.argv[1]).split(path.sep).reverse()[2] !== "node_modules")
		return console.log("User-install scripts was skipped.\n ");

	await addSamples();

	await addScriptsToPackage();

	console.log(" ");
	process.exit(0);
}

async function addScriptsToPackage() {
	const leafs = toUserPath("leafs");

	await fs.access(leafs);

	const user_scripts = (await fs.readdir(leafs)).filter((e) => e.endsWith(".js"));
	console.log("Scripts to save:", user_scripts);

	const user_package = new PackageJSON(toUserPath("package.json"));
	await user_package.read();
	const data = user_package.data;

	// Clear all generated scripts
	for (const script in data.scripts) {
		if (data.scripts[script].includes("leafs")) delete data.scripts[script];
	}

	for (let uscript of user_scripts) {
		const name = uscript.replace(/\.js$/, "");
		if (name in data.scripts) {
			// Script was already declarated
			console.error("Found script duplicate: ", name);
			console.error(`Rename leafs/${uscript} to disable this warning`);
			continue;
		}

		data.scripts[name] = `node leafs/${uscript}`;
	}

	data.scripts.update_leafs = "cd node_modules/leafy-utils && node install.js";

	await user_package.write();
}

async function addSamples() {
	const samples_from = "leafs/samples";
	const samples_destination = toUserPath("leafs");

	await fs.access(samples_destination);

	const leaf_samples = await fs.readdir(samples_from);

	const added_samples = [];

	for (const sample_name of leaf_samples) {
		const path_to_leaf = path.join(samples_from, sample_name);
		const path_to_user_leaf = path.join(samples_destination, sample_name);

		try {
			await fs.access(path_to_user_leaf);

			// File already exists, we dont need to make sample for it.
			continue;
		} catch (e) {
			if ("ENOENT" !== e.code) throw e;
		}

		await fs.writeFile(path_to_user_leaf, await fs.readFile(path_to_leaf));
	}

	console.log("Succesfully added samples: ", added_samples);
}

main();
